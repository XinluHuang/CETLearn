package com.xinluhuang.englishlearn.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xinluhuang.englishlearn.greendao.entity.Meaning;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "dict_collins_meaning".
*/
public class MeaningDao extends AbstractDao<Meaning, Void> {

    public static final String TABLENAME = "dict_collins_meaning";

    /**
     * Properties of entity Meaning.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "id");
        public final static Property Wid = new Property(1, int.class, "wid", false, "wid");
        public final static Property Type = new Property(2, String.class, "type", false, "type");
        public final static Property En = new Property(3, String.class, "en", false, "en");
        public final static Property Cn = new Property(4, String.class, "cn", false, "cn");
    }


    public MeaningDao(DaoConfig config) {
        super(config);
    }
    
    public MeaningDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"dict_collins_meaning\" (" + //
                "\"id\" INTEGER NOT NULL ," + // 0: id
                "\"wid\" INTEGER NOT NULL ," + // 1: wid
                "\"type\" TEXT," + // 2: type
                "\"en\" TEXT," + // 3: en
                "\"cn\" TEXT);"); // 4: cn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"dict_collins_meaning\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Meaning entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getWid());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String en = entity.getEn();
        if (en != null) {
            stmt.bindString(4, en);
        }
 
        String cn = entity.getCn();
        if (cn != null) {
            stmt.bindString(5, cn);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Meaning entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getWid());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String en = entity.getEn();
        if (en != null) {
            stmt.bindString(4, en);
        }
 
        String cn = entity.getCn();
        if (cn != null) {
            stmt.bindString(5, cn);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Meaning readEntity(Cursor cursor, int offset) {
        Meaning entity = new Meaning( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // wid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // en
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // cn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Meaning entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setWid(cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Meaning entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Meaning entity) {
        return null;
    }

    @Override
    public boolean hasKey(Meaning entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
